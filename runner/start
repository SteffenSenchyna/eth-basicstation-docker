#!/usr/bin/env bash

VERSION=2.8.4

# -----------------------------------------------------------------------------
# Colors
# -----------------------------------------------------------------------------

COLOR_INFO="\033[32m" # green
COLOR_WARNING="\033[33m" # yellow
COLOR_ERROR="\033[31m" # red
COLOR_END="\033[0m"


# -----------------------------------------------------------------------------
# Load Balena specific methods
# -----------------------------------------------------------------------------

# shellcheck source=/dev/null
[[ -n "$BALENA_DEVICE_UUID" ]] && source ./balena.sh

# -----------------------------------------------------------------------------
# Utils
# -----------------------------------------------------------------------------

function idle() {

    # Report GATEWAY_EUI if already defined
    [[ -n "${GATEWAY_EUI}" ]] && echo -e "${COLOR_INFO}GATEWAY_EUI: ${GATEWAY_EUI}${COLOR_END}"
    
    # Halt if Balena, exit after 5 seconds otherwise
    if [[ -n "$BALENA_DEVICE_UUID" ]]; then 
   balena-idle 
    else
        sleep 5
        exit 1
    fi

}

function restart_if_balena() {
   [[ -n "$BALENA_DEVICE_UUID" ]] && \
   echo -e "${COLOR_INFO}Service will restart now${COLOR_END}" && \
   balena-idle 
}

function create_reset_file {

    local RESET_FILE=/app/config/reset.sh
    
    # Raspberry Pi requires using libgpiod with gpiochip4
    if [[ $( grep -c "Raspberry Pi 5" /proc/cpuinfo ) -eq 0  ]]; then
        USE_LIBGPIOD=${USE_LIBGPIOD:-0}
        GPIO_CHIP=${GPIO_CHIP:-gpiochip0}
    else
        USE_LIBGPIOD=${USE_LIBGPIOD:-1}
        GPIO_CHIP=${GPIO_CHIP:-gpiochip4}
    fi

    if [[ "${INTERFACE}" == "USB" ]]; then
        echo "" > ${RESET_FILE}
    else
        if [[ ${USE_LIBGPIOD} -eq 0 ]]; then
            cp /app/reset.sh.legacy ${RESET_FILE}
        else
            cp /app/reset.sh.gpiod ${RESET_FILE}
        fi
        sed -i "s#{{GPIO_CHIP}}#${GPIO_CHIP}#" ${RESET_FILE}
        sed -i "s#{{RESET_GPIO}}#${RESET_GPIO:-17}#" ${RESET_FILE}
        sed -i "s#{{POWER_EN_GPIO}}#${POWER_EN_GPIO:-0}#" ${RESET_FILE}
        sed -i "s#{{POWER_EN_LOGIC}}#${POWER_EN_LOGIC:-1}#" ${RESET_FILE}
    fi
    chmod +x "${RESET_FILE}"
    ln -s "${RESET_FILE}" /app/config/reset_lgw.sh 2>/dev/null

}

function chip_id {

    local DESIGN=$1
    local DEVICE=$2
    local CHIP_ID
    
    [[ "$DEVICE" == *"ttyV"* ]] && TIMEOUT=10 || TIMEOUT=3

    if [[ "$DESIGN" == "auto" ]] || [[ "$DESIGN" == "corecell" ]]; then
        [[ "$DEVICE" == *"tty"* ]] && COM_TYPE="-u"
        CHIP_ID=$( timeout "${TIMEOUT}s" /app/artifacts/corecell/chip_id "$COM_TYPE" -d "$DEVICE" | grep 'EUI' | sed 's/^.*0x//' | tr "[:lower:]" "[:upper:]" )
        if [[ -n ${CHIP_ID} ]]; then
            RESPONSE=( "corecell" "$DEVICE" "$CHIP_ID" )
            return 1
        fi
    fi
        
    if [[ "$DESIGN" == "auto" ]] || [[ "$DESIGN" == "picocell" ]]; then
        CHIP_ID=$( timeout "${TIMEOUT}s" /app/artifacts/picocell/chip_id -d "$DEVICE" | tr "[:lower:]" "[:upper:]" )
        if [[ -n ${CHIP_ID} ]]; then
            RESPONSE=( "picocell" "$DEVICE" "$CHIP_ID" )
            sleep 5
            return 1
        fi
    fi
        
    return 0

}

function discover_concentrator {

    local INTERFACE=$1
    local DESIGN=$2
    local RADIO_NUM=$3

    # Grab potential devices based on interface
    if [[ "${INTERFACE}" == "AUTO" ]]; then
        DEVICES=$( ls /dev/spidev* /dev/ttyACM* /dev/ttyUSB* /dev/ttyV* 2> /dev/null )
    elif [[ "${INTERFACE}" == "SPI" ]]; then
        DEVICES=$( ls /dev/spidev* 2> /dev/null )
    else
        DEVICES=$( ls /dev/ttyACM* /dev/ttyUSB* /dev/ttyV* 2> /dev/null )
    fi

    # Look for devices
    FOUND=0
    for DEVICE in $DEVICES; do
        chip_id "${DESIGN,,}" "${DEVICE}"
        if [[ $? -eq 1 ]]; then
            FOUND=$(( FOUND + 1 ))
            if [[ ${FOUND} -eq ${RADIO_NUM} ]]; then
                # We pass the RESPONSE to the caller
                break
            fi
        fi
    done

    return $FOUND

}

function create_network_link {

    NETLINK=${DEVICE:-$( /sbin/ip route|awk '/default/ { print $3 ":3333" }' )}
    INTERFACE="USB"
    DEVICE="/dev/ttyV0"
    socat pty,link=$DEVICE,waitslave "tcp:$NETLINK" &

}

function cs_autoprovision() {
  local RAW
  local HTTP_STATUS

#   # Check if GATEWAY_EUI is set
#   if [[ -z "${GATEWAY_EUI}" ]]; then
#     get_gateway_eui
#   fi

  # Fetch gateway information
  HTTP_STATUS=$(curl -s -o gateway.json -w "%{http_code}" \
    --header 'Accept: application/json' \
    --header 'Authorization: Bearer '"${CS_KEY}"'' \
    --header 'Content-Type: application/json' \
    --request GET \
    "http://${API_URI}/api/gateways/${GATEWAY_EUI}" 2>/dev/null)

  RAW=$(cat gateway.json)
  rm gateway.json
  # Check HTTP status for GET request
  if [[ "$HTTP_STATUS" -eq 200 ]]; then
    echo -e "${COLOR_INFO}Chirpstack: Gateway exists, getting certificates${COLOR_END}"

    # Generate certificate
    HTTP_STATUS=$(curl -s -o cert.json -w "%{http_code}" \
      --header 'Accept: application/json' \
      --header 'Authorization: Bearer '"${CS_KEY}"'' \
      --header 'Content-Type: application/json' \
      --request POST \
      "http://${API_URI}/api/gateways/${GATEWAY_EUI}/generate-certificate" 2>/dev/null)

    RAW=$(cat cert.json)
    rm cert.json
    if [[ "$HTTP_STATUS" -eq 200 ]]; then
        TC_CERT=$(echo "$RAW" | jq -r '.tlsCert' 2>/dev/null)
        TC_KEY=$(echo "$RAW" | jq -r '.tlsKey' 2>/dev/null)
        TC_TRUST=$(echo "$RAW" | jq -r '.caCert' 2>/dev/null)
    if [[ -n "$TC_CERT" && -n "$TC_KEY" && -n "$TC_TRUST" ]]; then
        echo "${TC_CERT}" > tc.crt
        echo "${TC_KEY}" > tc.key
        echo "${TC_TRUST}" > tc.trust
        echo -e "${COLOR_INFO}Chirpstack: Certificates successfully generated${COLOR_END}"
    else
        echo -e "${COLOR_ERROR}Chirpstack: Invalid certificate response${COLOR_END}\n"
        idle
    fi
    else
        # Certificate generation failed
        MESSAGE=$(echo "$RAW" | jq -r '.message // "Unknown error"' 2>/dev/null)
        echo -e "${COLOR_ERROR}ERROR: $MESSAGE (HTTP $HTTP_STATUS)${COLOR_END}\n"
        idle
    fi
  else
    # Gateway does not exist or another error occurred
    MESSAGE=$(echo "$RAW" | jq -r '.message // "Unknown error"' 2>/dev/null)
    echo -e "${COLOR_ERROR}ERROR: $MESSAGE (HTTP $HTTP_STATUS)${COLOR_END}\n"
    return
  fi
}

function tts_autoprovision() {

    # Autoprovision variables needed
    TTS_USERNAME=${TTS_USERNAME:-"none"}
    GATEWAY_PREFIX=${GATEWAY_PREFIX:-"eui"}
    GATEWAY_ID=${GATEWAY_ID:-"${GATEWAY_PREFIX,,}-${GATEWAY_EUI,,}"}
    GATEWAY_NAME=${GATEWAY_NAME:-${GATEWAY_ID}}

    # Autoprovision regions defined here: https://www.thethingsindustries.com/docs/reference/frequency-plans/
    TTS_FREQUENCY_PLAN_ID=${TTS_FREQUENCY_PLAN_ID:-""}
    if [[ "$TTS_FREQUENCY_PLAN_ID" == "" ]]; then
        if [[ "$TTS_REGION" == "nam1" ]]; then
            TTS_FREQUENCY_PLAN_ID="US_902_928_FSB_2"
        elif [[ "$TTS_REGION" == "au1" ]]; then
            TTS_FREQUENCY_PLAN_ID="AU_915_928_FSB_2"
        else
            TTS_FREQUENCY_PLAN_ID="EU_863_870_TTN"
        fi
    fi

    local API_KEY_NAME="autoprovision-lns-key"
    local RAW
    local CODE
    local MESSAGE

    RAW=$(curl -s --location \
        --header 'Accept: application/json' \
        --header 'Authorization: Bearer '"${TTS_PERSONAL_KEY}"'' \
        --header 'Content-Type: application/json' \
        --request POST \
        --data-raw '{
            "gateway": {
            "ids": {
                "gateway_id": "'"${GATEWAY_ID}"'",
                "eui": "'"${GATEWAY_EUI}"'"
            },
            "name": "'"${GATEWAY_NAME}"'",
            "gateway_server_address": "'"${SERVER}"'",
            "frequency_plan_id": "'"${TTS_FREQUENCY_PLAN_ID}"'"
            }
        }' \
        'https://'"${SERVER}"'/api/v3/users/'"${TTS_USERNAME}"'/gateways' 2>/dev/null)

    CODE=$( echo "${RAW}" | jq --raw-output '.code' 2>/dev/null )
    MESSAGE=$( echo "${RAW}" | jq --raw-output '.message' 2>/dev/null )

    # ToDo: find more error codes when provision a gateway via API.
    if [[ "$CODE" == "null" ]]; then
        echo -e "${COLOR_INFO}Gateway auto provisioned successfully!${COLOR_END}"
    elif [[ "$CODE" == 6 ]] || [[ "$CODE" == 9 ]]; then
        echo -e "${COLOR_WARNING}WARNING: The gateway was already provisioned${COLOR_END}"
    else
        echo -e "${COLOR_ERROR}ERROR: Autoprovisioning error $MESSAGE ($CODE)${COLOR_END}\n"
        return
    fi

    # List api keys
    local IDS
    IDS=$(curl -s --location \
        --header 'Accept: application/json' \
        --header 'Authorization: Bearer '"${TTS_PERSONAL_KEY}"'' \
        --header 'Content-Type: application/json' \
        --request GET \
        'https://'"${SERVER}"'/api/v3/gateways/'"${GATEWAY_ID}"'/api-keys' | jq '.api_keys[] | select(.name == "'"${API_KEY_NAME}"'") | .id' 2>/dev/null)

    # Delete previous API keys
    for ID in $IDS; do
        curl -s --location \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer '"${TTS_PERSONAL_KEY}"'' \
            --header 'Content-Type: application/json' \
            --request PUT \
            --data-raw '{
                "name":"'"${API_KEY_NAME}"'",
                "rights":[],
                "expires_at":null
            }' \
            'https://'"${SERVER}"'/api/v3/gateways/'"${GATEWAY_ID}"'/api-keys/'"${ID//\"/}" >/dev/null
    done

    # Create new api key
    RAW=$(curl -s --location \
        --header 'Accept: application/json' \
        --header 'Authorization: Bearer '"${TTS_PERSONAL_KEY}"'' \
        --header 'Content-Type: application/json' \
        --request POST \
        --data-raw '{
            "name":"'"${API_KEY_NAME}"'",
            "rights":["RIGHT_GATEWAY_LINK"],
            "expires_at":null
        }' \
        'https://'"${SERVER}"'/api/v3/gateways/'"${GATEWAY_ID}"'/api-keys' 2>/dev/null)

    local KEY
    KEY=$( echo "$RAW" | jq --raw-output '.key' 2>/dev/null )

    if [[ "$KEY" != "null" ]]; then
        TC_KEY=$KEY
        echo -e "${COLOR_INFO}TC_KEY successfully generated${COLOR_END}"
        [[ -n "$BALENA_DEVICE_UUID" ]] && balena_set_variable "TC_KEY" "$TC_KEY"
        restart_if_balena
    fi

    echo

}

function clean_certs_keys() {

    local CONTENT=$1

    if [[ "$CONTENT" == *-----* ]]; then

        CONTENT=${CONTENT//-----/-}
        readarray -d '-' -t PARTS <<< "$CONTENT"
        local HEADER=${PARTS[1]}
        local KEY
        KEY=$( echo "${PARTS[2]}" | tr '\n' ' ' | sed 's/\s//g' )
        local FOOTER=${PARTS[3]}
        echo -e "-----$HEADER-----\n$KEY\n-----$FOOTER-----"

    else

        echo "$CONTENT"

    fi

}
# -----------------------------------------------------------------------------
# Preparing configuration
# -----------------------------------------------------------------------------

# Move into configuration folder
mkdir -p config
cd config || exit 1
CONFIG_FILE=./station.conf

# -----------------------------------------------------------------------------
# Network device
# -----------------------------------------------------------------------------

[[ "${INTERFACE}" == "NET" ]] && create_network_link

# -----------------------------------------------------------------------------
# Secrets
# -----------------------------------------------------------------------------

[[ -f "/run/secrets/tc.uri"     ]] &&     TC_URI=$( < /run/secrets/tc.uri     )
[[ -f "/run/secrets/tc.trust"   ]] &&   TC_TRUST=$( < /run/secrets/tc.trust   )
[[ -f "/run/secrets/tc.crt"     ]] &&     TC_CRT=$( < /run/secrets/tc.crt     )
[[ -f "/run/secrets/tc.key"     ]] &&     TC_KEY=$( < /run/secrets/tc.key     )

[[ -f "/run/secrets/cups.uri"   ]] &&   CUPS_URI=$( < /run/secrets/cups.uri   )
[[ -f "/run/secrets/cups.trust" ]] && CUPS_TRUST=$( < /run/secrets/cups.trust )
[[ -f "/run/secrets/cups.crt"   ]] &&   CUPS_CRT=$( < /run/secrets/cups.crt   )
[[ -f "/run/secrets/cups.key"   ]] &&   CUPS_KEY=$( < /run/secrets/cups.key   )

# -----------------------------------------------------------------------------
# Server configuration
# -----------------------------------------------------------------------------

# Defaults to TTN server v3, `eu1` region,
# use a custom SERVER, CUPS_URI or TC_URI to change this.
# If TTS_TENANT is defined different than "ttn", it will be used to build the
# tenant URL under thethings.industries, otherwise only the region will be used
# to build the URL under cloud.thethings.network.

TTN_REGION=${TTN_REGION:-"eu1"}
TTS_REGION=${TTS_REGION:-$TTN_REGION}
TTS_TENANT=${TTS_TENANT:-"ttn"}
if [[ "$TTS_TENANT" == "ttn" ]]; then
    SERVER=${SERVER:-"${TTS_REGION}.cloud.thethings.network"}
else
    SERVER=${SERVER:-"${TTS_TENANT}.${TTS_REGION}.cloud.thethings.industries"}
fi
CUPS_URI=${CUPS_URI:-"https://${SERVER}:443"}
TC_URI=${TC_URI:-"wss://${SERVER}:8887"}

# -----------------------------------------------------------------------------
# Mode (static/dynamic) & protocol (cups/lns)
# -----------------------------------------------------------------------------

# New USE_CUPS variable, will be mandatory in the future
# Possible values are 0 or 1, setting it here to 2 when undefined
USE_CUPS=${USE_CUPS:-2} # undefined by default
PROTOCOL=""

# Configuration mode
if [[ -f ${CONFIG_FILE} ]]; then
    MODE="STATIC"
    if [[ $USE_CUPS -eq 1 ]]; then
        PROTOCOL="CUPS"
    elif [[ -f ./cups.key ]] && [[ $USE_CUPS -ne 0 ]]; then
        PROTOCOL="CUPS"
        echo -e "${COLOR_WARNING}WARNING: USE_CUPS variable will be mandatory in future versions to enable CUPS${COLOR_END}"
    elif [[ -f ./tc.key ]]; then
        PROTOCOL="LNS"
    elif [[ -n "${TTS_PERSONAL_KEY}" ]] && [[ -n "${TTS_USERNAME}" ]]; then
        tts_autoprovision
        if [[ -n "${TC_KEY}" ]]; then
            PROTOCOL="LNS"
        fi
    elif [[ -n "${CS_KEY}" ]] || [[ -n "${TC_KEY}" ]]; then
            PROTOCOL="LNS"
    fi
    if [[ -z "${PROTOCOL}" ]]; then
        echo -e "${COLOR_ERROR}ERROR: Custom configuration folder found, but missing files: either force key-less CUPS with USE_CUPS=1 or provide a valid cups.key or tc.key files or TTS_PERSONAL_KEY and TTS_USERNAME variable${COLOR_END}"
        idle
    fi
else
    MODE="DYNAMIC"
    if [[ $USE_CUPS -eq 1 ]]; then
        PROTOCOL="CUPS"
    elif [[ -n "${CUPS_KEY}" ]] && [[ ${USE_CUPS} -ne 0 ]]; then
        PROTOCOL="CUPS"
        echo -e "${COLOR_WARNING}WARNING: USE_CUPS variable will be mandatory in future versions to enable CUPS${COLOR_END}"
    elif [[ -n "${TC_KEY}" ]]; then
        PROTOCOL="LNS"
    elif [[ -n "${TTS_PERSONAL_KEY}" ]] && [[ -n "${TTS_USERNAME}" ]]; then
        tts_autoprovision
        if [[ -n "${TC_KEY}" ]]; then
            PROTOCOL="LNS"
        fi
    elif [[ -n "${CS_KEY}" ]] || [[ -n "${TC_KEY}" ]]; then
            PROTOCOL="LNS"
    fi
    if [[ -z "${PROTOCOL}" ]]; then
        echo -e "${COLOR_ERROR}ERROR: Missing configuration, either force key-less CUPS with USE_CUPS=1 or define valid TC_KEY, CUPS_KEY, CS_KEY or TTS_PERSONAL_KEY and TTS_USERNAME${COLOR_END}"
        idle
    fi
fi

# -----------------------------------------------------------------------------
# Retrieve values from static config files
# -----------------------------------------------------------------------------

if [[ -f ${CONFIG_FILE} ]]; then

    # Get device & interface
    DEVICE=$( jq '.[] | .device' "${CONFIG_FILE}" | head -1 | sed 's/\("\|spi:\|usb:\)//g' )
    [[ "${DEVICE}" == *"spi"* ]] && INTERFACE="SPI" || INTERFACE="USB"

    # Guess generic model
    if [[ $( grep -c "SX1302_conf" "${CONFIG_FILE}" ) -ne 0 ]]; then
        MODEL=${MODEL:-"SX1302"}
    elif [[ "${INTERFACE}" == "USB" ]]; then
        MODEL=${MODEL:-"SX1308"}
    else
        MODEL=${MODEL:-"SX1301"}
    fi

    # Get Gateway EUI
    GATEWAY_EUI=$( jq '.station_conf.routerid' "${CONFIG_FILE}" | sed 's/"//g' )
    [[ -n "${GATEWAY_EUI}" ]] && GATEWAY_EUI_SOURCE="file"

fi

# -----------------------------------------------------------------------------
# Auto-discover up-front
# -----------------------------------------------------------------------------

# If no MODEL defined we try to find the concentrator
if [[ -z "${MODEL}" ]] || [[ "${MODEL}" == "AUTO" ]]; then

    unset MODEL

    create_reset_file
    discover_concentrator "${INTERFACE:-AUTO}" "${DESIGN:-AUTO}" "${RADIO_NUM:-1}"
    if [[ $? -ne 0 ]]; then

        DESIGN=${RESPONSE[0]}
        DEVICE=${RESPONSE[1]}
        CHIP_ID=${RESPONSE[2]}

        [[ "${DEVICE}" == *"spi"*    ]] && INTERFACE="SPI" || INTERFACE="USB"
        [[ "${DESIGN}" == "corecell" ]] && MODEL="SX1302"
        [[ "${DESIGN}" == "picocell" ]] && MODEL="SX1308"

    else

        echo -e "${COLOR_ERROR}ERROR: MODEL variable not set and we couldn't find any concentrator!${COLOR_END}"
	    idle

    fi

fi

# -----------------------------------------------------------------------------
# Check MODEL
# -----------------------------------------------------------------------------

# MODEL can be:
# * A developing gateway (mostly by RAKwireless), example: RAK7248
# * A concentrator module (by RAKWireless, IMST, SeeedStudio,...), example: RAK5416
# * A concentrator chip (Semtech's naming), example: SX1303
MODEL=${MODEL^^}

# Get the concentrator based on MODEL
declare -A MODEL_MAP=(

    # SX1301
    [SX1301]=SX1301
    [RAK7243]=SX1301 [RAK7243C]=SX1301 [RAK7244]=SX1301 [RAK7244C]=SX1301 [RAK831]=SX1301 [RAK833]=SX1301 [RAK2245]=SX1301 [RAK2247]=SX1301
    [IC880A]=SX1301 [PG1301]=SX1301 [REWAN1012]=SX1301

    # SX1302
    [SX1302]=SX1302
    [RAK7248]=SX1302 [RAK7248C]=SX1302 [RAK7271]=SX1302 [RAK2287]=SX1302
    [WM1302]=SX1302 [PG1302]=SX1302

    # SX1303
    [SX1303]=SX1303
    [RAK5146]=SX1303 [RAK5166]=SX1303 [RAK5167]=SX1303 [RAK7371]=SX1303

    # SX1308
    [SX1308]=SX1308
    [RAK7246]=SX1308 [RAK7246G]=SX1308 [RAK2246]=SX1308
    [R11E-LR8]=SX1308 [R11E-LR9]=SX1308 [R11E-LORA8]=SX1308 [R11E-LORA9]=SX1308

)

CONCENTRATOR=${MODEL_MAP[$MODEL]}
if [[ -z "${CONCENTRATOR}" ]]; then
    echo -e "${COLOR_ERROR}ERROR: Unknown MODEL value ($MODEL). Valid values are: ${!MODEL_MAP[*]}${COLOR_END}"
	idle
fi

# -----------------------------------------------------------------------------
# Identify interface
# -----------------------------------------------------------------------------

# Backwards compatibility
DEVICE=${DEVICE:-$LORAGW_SPI}

# Models with USB interface
MODELS_WITH_USB="RAK5166 RAK5167 RAK7271 RAK7371 R11E-LORA8 R11E-LORA9 R11E-LR8 R11E-LR9"
if [[ $MODELS_WITH_USB =~ (^|[[:space:]])$MODEL($|[[:space:]]) ]]; then
    INTERFACE="${INTERFACE:-"USB"}"
elif [[ "${DEVICE}" == "AUTO" ]]; then
    INTERFACE=${INTERFACE:-"AUTO"}
else
    INTERFACE=${INTERFACE:-"SPI"}
fi

# -----------------------------------------------------------------------------
# Identify concentrator design
# -----------------------------------------------------------------------------

# Concentrator design
if [[ "${CONCENTRATOR}" == "SX1308" ]] && [[ "${INTERFACE}" == "USB" ]]; then
    DESIGN=${DESIGN:-"picocell"}
elif [[ "${CONCENTRATOR}" == "SX1301" ]] || [[ "${CONCENTRATOR}" == "SX1308" ]]; then
    DESIGN=${DESIGN:-"v2"}
else
    DESIGN=${DESIGN:-"corecell"}
fi
DESIGN=${DESIGN,,}

# -----------------------------------------------------------------------------
# GPIO configuration
# -----------------------------------------------------------------------------

# Backwards compatibility
RESET_GPIO=${RESET_GPIO:-$GW_RESET_GPIO}
POWER_EN_GPIO=${POWER_EN_GPIO:-$GW_POWER_EN_GPIO}

# If interface is USB disable RESET_GPIO, otherwise default to GPIO17 or pin 11
if [[ "${INTERFACE}" == "USB" ]]; then
    RESET_PIN=${RESET_PIN:-0}
else
    RESET_PIN=${RESET_PIN:-11}
fi

# Map hardware pins to GPIO on Raspberry Pi
declare -a GPIO_MAP=( 0 0 0 2 0 3 0 4 14 0 15 17 18 27 0 22 23 0 24 10 0 9 25 11 8 0 7 0 1 5 0 6 12 13 0 19 16 26 20 0 21 )
RESET_GPIO=${RESET_GPIO:-${GPIO_MAP[$RESET_PIN]}}

# The RAK833-SPI/USB has a SPDT to select USB/SPI interfaces
# If used with RAK2247 or RAK2287 hats this is wired to GPIO20
if [[ "$MODEL" == "RAK833" ]]; then
    if [[ "$INTERFACE" != "USB" ]]; then
        POWER_EN_GPIO=${POWER_EN_GPIO:-20}
        POWER_EN_LOGIC=${POWER_EN_LOGIC:-0}
    fi
fi

# Otherwise the default is no power enable pin
POWER_EN_GPIO=${POWER_EN_GPIO:-0}
POWER_EN_LOGIC=${POWER_EN_LOGIC:-1}

# Create reset file
create_reset_file

# -----------------------------------------------------------------------------
# Radio device auto-discovery
# -----------------------------------------------------------------------------

if [[ -z "${DEVICE}" ]] || [[ "${DEVICE}" == "AUTO" ]]; then
    unset DEVICE
    # Look for concentrator
    discover_concentrator "${INTERFACE:-AUTO}" "${DESIGN:-AUTO}" "${RADIO_NUM:-1}"
    if [[ $? -ne 0 ]]; then
        DESIGN=${RESPONSE[0]}
        DEVICE=${RESPONSE[1]}
        CHIP_ID=${RESPONSE[2]}
    else
        echo -e "${COLOR_WARNING}ERROR: DEVICE set to auto discover but no concentrator found! (INTERFACE set to $INTERFACE) ${COLOR_END}"
    fi
fi

# -----------------------------------------------------------------------------
# Radio device defaults
# -----------------------------------------------------------------------------

# If DEVICE not yet defined, use sensible defaults
if [[ -z "${DEVICE}" ]]; then
    if [[ "${INTERFACE}" == "SPI" ]]; then
        DEVICE=${DEVICE:-"/dev/spidev0.0"}
    else
        MODELS_WITHOUT_ACM="RAK833 RAK2247"
        if [[ $MODELS_WITHOUT_ACM =~ (^|[[:space:]])$MODEL($|[[:space:]]) ]]; then
            DEVICE=${DEVICE:-"/dev/ttyUSB0"}
        fi
        DEVICE=${DEVICE:-"/dev/ttyACM0"}
    fi
fi

# Assert device
if [[ ! -e $DEVICE ]]; then
    echo -e "${COLOR_ERROR}ERROR: $DEVICE does not exist${COLOR_END}"
    idle
fi

# Fix INTERFACE based on DEVICE
[[ "${DEVICE}" == *"spi"* ]] && INTERFACE="SPI" || INTERFACE="USB"

export LORAGW_SPI=$DEVICE

# -----------------------------------------------------------------------------
# Fix SPI speed based on CONCENTRATOR
# -----------------------------------------------------------------------------

# Set default SPI speed and clock source for SX1301 and SX1308 concentrators to 2MHz and radio_1
if [[ "${CONCENTRATOR}" == "SX1301" ]] || [[ "${CONCENTRATOR}" == "SX1308" ]]; then
    SPI_SPEED=${SPI_SPEED:-2000000}
    CLKSRC=${CLKSRC:-1}
fi

export LORAGW_SPI_SPEED=${SPI_SPEED:-8000000}

# -----------------------------------------------------------------------------
# Gateway EUI
# -----------------------------------------------------------------------------

# Source to get the EUI from
GATEWAY_EUI_NIC=${GATEWAY_EUI_NIC:-"manual"}
GATEWAY_EUI_SOURCE=${GATEWAY_EUI_SOURCE:-$GATEWAY_EUI_NIC}

# Check if we should get the GATEWAY_EUI from the chip
if [[ "$GATEWAY_EUI_SOURCE" == "chip" ]]; then

    # Check if it's already cached
    if [[ -n "${CHIP_ID}" ]]; then
        GATEWAY_EUI=${CHIP_ID}
    else
        chip_id "$DESIGN" "$DEVICE"
        if [[ $? -eq 1 ]]; then
            CHIP_ID=${RESPONSE[2]}
            GATEWAY_EUI=${CHIP_ID}
        fi
    fi

fi

# If still no GATEWAY_EUI, try building it from a NIC MAC
if [[ -z "${GATEWAY_EUI}" ]]; then

    # Unset it but keep it global
    GATEWAY_EUI_SOURCE=""

    # Try usual interfaces
    for INET in eth0 wlan0 usb0 eth1; do
        if [[ $( grep -c "^\s*${INET}:" /proc/net/dev ) -eq 1 ]]; then
            GATEWAY_EUI_SOURCE=$INET
            break
    fi
    done

    # If none of the above, get the most used NIC based on received bytes
    if [[ -z $GATEWAY_EUI_SOURCE ]]; then
        GATEWAY_EUI_SOURCE=$( tail -n+3 < /proc/net/dev | sort -k2 -nr | head -n1 | cut -d ":" -f1 | sed 's/ //g' )
    fi

    # Get the Gateway EUI from the source
    if [[ -n $GATEWAY_EUI_SOURCE ]]; then
        GATEWAY_EUI=$( ip link show "$GATEWAY_EUI_SOURCE" | awk '/ether/ {print $2}' | awk -F: '{print $1$2$3"FFFE"$4$5$6}' )
    else
        echo -e "${COLOR_ERROR}ERROR: No network interface found. Cannot set gateway EUI.${COLOR_END}"
    fi

fi

# Normalize EUI
GATEWAY_EUI=${GATEWAY_EUI^^}

# Check we have an EUI
if [[ -z ${GATEWAY_EUI} ]] ; then
    echo -e "${COLOR_ERROR}ERROR: GATEWAY_EUI not set${COLOR_END}"
	idle
fi


# -----------------------------------------------------------------------------
# Update Router ID in Config File if Static Config Exists
# -----------------------------------------------------------------------------

if [[ -f "${CONFIG_FILE}" ]]; then
    # echo -e "${COLOR_INFO}Static configuration file found: ${CONFIG_FILE}${COLOR_END}"
    # echo -e "${COLOR_INFO}Setting routerid to GATEWAY_EUI ${GATEWAY_EUI}${COLOR_END}"

    # Update the routerid in the JSON config file
    sed -i "s/\"routerid\": \".*\"/\"routerid\": \"${GATEWAY_EUI}\"/" "$CONFIG_FILE"

    # Verify the change
    if ! grep -q "\"routerid\": \"${GATEWAY_EUI}\"" "$CONFIG_FILE"; then
        echo -e "${COLOR_ERROR}ERROR: Failed to update routerid in ${CONFIG_FILE}${COLOR_END}"
        exit 1
    fi
else
    echo -e "${COLOR_WARNING}No static configuration file found (${CONFIG_FILE}). Skipping routerid update.${COLOR_END}"
fi

# -----------------------------------------------------------------------------
# GPS Configuration
# -----------------------------------------------------------------------------

# Models with I2C GPS
MODELS_WITH_I2C_GPS="RAK7243C RAK7244C RAK7248C"
if [[ $MODELS_WITH_I2C_GPS =~ (^|[[:space:]])$MODEL($|[[:space:]]) ]]; then
    GPS_DEV=${GPS_DEV:-"/dev/i2c-1"}
fi

# Models with UART GPS
MODELS_WITH_UART_GPS="RAK7243 RAK7244 RAK7246G RAK7248 RAK831 RAK2245 RAK2287 RAK5146"
if [[ $MODELS_WITH_UART_GPS =~ (^|[[:space:]])$MODEL($|[[:space:]]) ]]; then
    GPS_DEV=${GPS_DEV:-"/dev/ttyAMA0"}
fi

# Is GPS interface set?
if [[ -z "$GPS_DEV" ]] || [[ ! -e $GPS_DEV ]]; then
    HAS_GPS=0
else
    HAS_GPS=${HAS_GPS:-1}
fi
[[ $HAS_GPS -eq 0 ]] && GPS_DEV="" # allows to disable GPS in models with GPS

# -----------------------------------------------------------------------------
# Whitelists
# -----------------------------------------------------------------------------

IFS=', ' read -r -a WHITELIST_NETIDS_ARRAY <<< "${WHITELIST_NETIDS:-} "
WHITELIST_NETIDS=""
for NETID in "${WHITELIST_NETIDS_ARRAY[@]}"; do
    WHITELIST_NETIDS+=$( printf "0x%06X " "$NETID" )
done
WHITELIST_NETIDS=$( echo "${WHITELIST_NETIDS}" | xargs )

IFS=', ' read -r -a WHITELIST_OUIS_ARRAY <<< "${WHITELIST_OUIS:-} "
WHITELIST_OUIS=""
for OUI in "${WHITELIST_OUIS_ARRAY[@]}"; do
    WHITELIST_OUIS+=$( printf "0x%06X " "$OUI" )
done
WHITELIST_OUIS=$( echo "${WHITELIST_OUIS}" | xargs )

# -----------------------------------------------------------------------------
# Debug
# -----------------------------------------------------------------------------

echo -e "${COLOR_WARNING}------------------------------------------------------------------${COLOR_END}"
echo -e "${COLOR_WARNING}BasicStation (TM) Packet Forwarder Container v${VERSION}${COLOR_END}"
echo -e "${COLOR_WARNING}(c) Xose Pérez 2022-2024${COLOR_END}"
echo -e ""
echo -e "${COLOR_WARNING}Based on:${COLOR_END}"
echo -e "${COLOR_WARNING} * basicstation v2.0.6${COLOR_END}"
echo -e "${COLOR_WARNING} * sx1302_hal v2.1.0${COLOR_END}"
echo -e "${COLOR_WARNING} * picoGW_hal v0.2.3${COLOR_END}"
echo -e "${COLOR_WARNING}------------------------------------------------------------------${COLOR_END}"

echo -e ""

echo -e "${COLOR_INFO}Protocol${COLOR_END}"
echo -e "${COLOR_INFO}------------------------------------------------------------------${COLOR_END}"
echo -e "${COLOR_INFO}Mode:          ${MODE}${COLOR_END}"
echo -e "${COLOR_INFO}Protocol:      ${PROTOCOL}${COLOR_END}"
if [[ "$PROTOCOL" == "CUPS" ]]; then
echo -e "${COLOR_INFO}CUPS Server:   ${CUPS_URI}${COLOR_END}"
else
echo -e "${COLOR_INFO}LNS Server:    ${TC_URI}${COLOR_END}"
fi
echo -e "${COLOR_INFO}Gateway EUI:   ${GATEWAY_EUI}${COLOR_END}"
echo -e "${COLOR_INFO}EUI Source:    ${GATEWAY_EUI_SOURCE}${COLOR_END}"
if [[ -n "${WHITELIST_NETIDS}" ]]; then
echo -e "${COLOR_INFO}NetIDs:        ${WHITELIST_NETIDS// /,}${COLOR_END}"
fi
if [[ -n "${WHITELIST_OUIS}" ]]; then
echo -e "${COLOR_INFO}OUIs:          ${WHITELIST_OUIS// /,}${COLOR_END}"
fi

echo -e ""

echo -e "${COLOR_INFO}Radio${COLOR_END}"
echo -e "${COLOR_INFO}------------------------------------------------------------------${COLOR_END}"
echo -e "${COLOR_INFO}Model:         ${MODEL}${COLOR_END}"
echo -e "${COLOR_INFO}Concentrator:  ${CONCENTRATOR}${COLOR_END}"
echo -e "${COLOR_INFO}Design:        ${DESIGN^^}${COLOR_END}"
if [[ -n "${NETLINK}" ]]; then
echo -e "${COLOR_INFO}Network link:  ${NETLINK}${COLOR_END}"
fi
echo -e "${COLOR_INFO}Interface:     ${INTERFACE}${COLOR_END}"
echo -e "${COLOR_INFO}Radio Device:  ${DEVICE}${COLOR_END}"
if [[ -n "${CHIP_ID}" ]]; then
echo -e "${COLOR_INFO}Chip ID:       ${CHIP_ID}${COLOR_END}"
fi
if [[ ${HAS_GPS} -eq 1 ]]; then
echo -e "${COLOR_INFO}GPS Device:    ${GPS_DEV}${COLOR_END}"
fi

if [[ "$INTERFACE" == "SPI" ]]; then
echo -e "${COLOR_INFO}SPI Speed:     ${LORAGW_SPI_SPEED}${COLOR_END}"
if [[ $USE_LIBGPIOD -eq 1 ]]; then
echo -e "${COLOR_INFO}GPIO chip:     ${GPIO_CHIP}${COLOR_END}"
fi
echo -e "${COLOR_INFO}Reset GPIO:    ${RESET_GPIO}${COLOR_END}"
echo -e "${COLOR_INFO}Enable GPIO:   ${POWER_EN_GPIO}${COLOR_END}"
fi
if [[ $POWER_EN_GPIO -ne 0 ]]; then
echo -e "${COLOR_INFO}Enable Logic:  ${POWER_EN_LOGIC}${COLOR_END}"
fi

echo -e ""

# -----------------------------------------------------------------------------
# Push to Balena
# -----------------------------------------------------------------------------

[[ -n "$BALENA_DEVICE_UUID" ]] && balena_set_label "EUI" "$GATEWAY_EUI"

# -----------------------------------------------------------------------------
# Generate dynamic configuration files
# -----------------------------------------------------------------------------

# Link the corresponding configuration file
if [[ ! -f "${CONFIG_FILE}" ]]; then

    cp "/app/station.${DESIGN}.conf" "${CONFIG_FILE}"

    sed -i "s#\"device\":\s*.*,#\"device\": \"${INTERFACE,,}:${DEVICE}\",#" "${CONFIG_FILE}"
    sed -i "s#\"routerid\":\s*.*,#\"routerid\": \"${GATEWAY_EUI}\",#" "${CONFIG_FILE}"
    sed -i "s#\"clksrc\":\s*.*,#\"clksrc\": ${CLKSRC:-0},#" "${CONFIG_FILE}"

    if [[ ${HAS_GPS} -eq 1 ]]; then
    sed -i "s#\"gps\":\s*.*,#\"gps\": \"${GPS_DEV:-""}\",#" "${CONFIG_FILE}"
    sed -i "s#\"pps\":\s*false,#\"pps\": true,#" "${CONFIG_FILE}"
    fi

    if [[ ${DISABLE_CLEAR_CHANNEL_ANALYSIS:-0} -eq 1 ]]; then
        sed -i "s#\"nocca\":\s*.*,#\"nocca\": true,#" "${CONFIG_FILE}"
    fi
    if [[ ${DISABLE_DUTY_CYCLE_CHECK:-0} -eq 1 ]]; then
        sed -i "s#\"nodc\":\s*.*,#\"nodc\": true,#" "${CONFIG_FILE}"
    fi
    if [[ ${DISABLE_DWELL_TIME_LIMITS:-0} -eq 1 ]]; then
        sed -i "s#\"nodwell\":\s*.*,#\"nodwell\": true,#" "${CONFIG_FILE}"
    fi

    if [[ -n "${WHITELIST_NETIDS}" ]]; then
        sed -i "s#\"whitelist_netids\":\s*.*,#\"whitelist_netids\": [\"${WHITELIST_NETIDS// /\",\"}\"],#" "${CONFIG_FILE}"
    fi
    if [[ -n "${WHITELIST_OUIS}" ]]; then
        sed -i "s#\"whitelist_ouis\":\s*.*,#\"whitelist_ouis\": [\"${WHITELIST_OUIS// /\",\"}\"],#" "${CONFIG_FILE}"
    fi

fi

# If stdn variant (or any *n variant) we need at least one slave concentrator
if [[ ! -f ./slave-0.conf ]]; then
    echo "{}" > ./slave-0.conf
fi

# CUPS protocol
if [[ "${PROTOCOL}" == "CUPS" ]]; then
    if [[ ! -f ./cups.uri ]]; then
        echo "${CUPS_URI}" > cups.uri
    fi
    if [[ ! -f ./cups.trust ]]; then
        if [[ -z "${CUPS_TRUST}" ]]; then
            cp /app/cacert.pem cups.trust
        else
            clean_certs_keys "${CUPS_TRUST}" > cups.trust
        fi
    fi
    if [[ ! -f ./cups.crt ]]; then
        if [[ -n "${CUPS_CRT}" ]]; then
            clean_certs_keys "${CUPS_CRT}" > cups.crt
        fi
    fi
    if [[ ! -f ./cups.key ]]; then
        if [[ ! -f ./cups.crt ]]; then
	        echo "Authorization: Bearer ${CUPS_KEY}" | perl -p -e 's/\r\n|\n|\r/\r\n/g'  > cups.key
        else
            clean_certs_keys "$CUPS_KEY" > cups.key
        fi
    fi
fi

# LNS Protocol
if [[ "$PROTOCOL" == "LNS" ]]; then
    # Check if we need to autoprovision using CS_KEY
    if [[ -n "${CS_KEY}" ]]; then
        # Only call autoprovision if tc.crt does not exist or is about to expire
        if [[ ! -f ./tc.crt || $(openssl x509 -checkend 2592000 -noout -in ./tc.crt 2>/dev/null || echo "expired") == "expired" ]]; then
            cs_autoprovision
        fi
    fi

    # Create tc.uri if it doesn't exist
    if [[ ! -f ./tc.uri ]]; then
        echo "$TC_URI" > tc.uri
    fi

    # Handle tc.trust (Root CA certificate)
    if [[ ! -f ./tc.trust ]]; then
        if [[ -z "$TC_TRUST" ]]; then
            cp /app/cacert.pem tc.trust
        else
            clean_certs_keys "$TC_TRUST" > tc.trust
        fi
    fi

    # Handle tc.crt (Client certificate)
    if [[ ! -f ./tc.crt ]]; then
        if [[ -n "$TC_CRT" ]]; then
            clean_certs_keys "$TC_CRT" > tc.crt
        fi
    fi

    # Handle tc.key (Private key)
    if [[ ! -f ./tc.key ]]; then
        if [[ ! -f ./tc.crt ]]; then
            echo "Authorization: Bearer $TC_KEY" | perl -p -e 's/\r\n|\n|\r/\r\n/g' > tc.key
        else
            clean_certs_keys "$TC_KEY" > tc.key
        fi
    fi
fi


# -----------------------------------------------------------------------------
# [OPTIONAL] DNS check for TC_URI
# -----------------------------------------------------------------------------

MAX_RETRIES=5
SLEEP_SECONDS=5

# 1. Strip off wss://
CHECK_URL="$(echo "$TC_URI" | sed -E 's@^wss://@@')"

# 2. Extract only the hostname portion (strip :port /path etc.)
CHECK_HOST="$(echo "$CHECK_URL" | sed -E 's@:.*@@; s@/.*@@')"

if [ -z "$CHECK_HOST" ]; then
  echo -e "${COLOR_WARNING}WARNING: Could not parse a hostname from: ${TC_URI}${COLOR_END}"
else
  for (( i=1; i<=MAX_RETRIES; i++ )); do
      echo -e "${COLOR_INFO}Attempt $i/$MAX_RETRIES: Checking DNS resolution for '$CHECK_HOST'...${COLOR_END}"

      if getent hosts "$CHECK_HOST" >/dev/null 2>&1; then
            echo -e "${COLOR_INFO}DNS OK for $CHECK_HOST\nStarting Basic Station${COLOR_END}"
          break
      fi

      echo -e "${COLOR_WARNING}DNS not ready yet. Sleeping $SLEEP_SECONDS seconds...${COLOR_END}"
      sleep $SLEEP_SECONDS
  done

  # Final DNS check
  if ! getent hosts "$CHECK_HOST" >/dev/null 2>&1; then
      echo -e "${COLOR_ERROR}ERROR: DNS for $CHECK_HOST not resolved after $MAX_RETRIES attempts${COLOR_END}"
      exit 1
  fi
fi


# -----------------------------------------------------------------------------
# Start packet forwarder
# -----------------------------------------------------------------------------

export STATION_RADIOINIT=/app/config/reset.sh
exec /app/artifacts/"${DESIGN}"/station -f
